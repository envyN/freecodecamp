// https://learn.freecodecamp.org/coding-interview-prep/project-euler/problem-2-even-fibonacci-numbers/

// Project Euler: Problem 2: Even Fibonacci Numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
// the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed nth term,
// find the sum of the even-valued terms.

// fiboEvenSum(10) should return 188.
// fiboEvenSum(23) should return 60696.
// fiboEvenSum(43) should return 1485607536.
// Your function is not returning the correct result using our tests values.
// Your function should return an even value.


function Logger(number, result) {
    console.log(`#${number} : ${JSON.stringify(result)}`);
}

const map = {
    1: {n: 1, se: 0},
    2: {n: 2, se: 2}
};

function fibo(n) {
    if (map[n]) {
        return map[n];
    }
    switch (true) {
        case (typeof n !== 'number'):
        case n < 1:
            return {n: 0, se: 0};
        case n > 2:
            const fn1 = fibo(n - 1);
            const fn2 = fibo(n - 2);
            const ret = {
                n: fn1.n + fn2.n,
                se: fn1.se
            };
            if (ret.n % 2 === 0) {
                ret.se += ret.n;
            }
            map[n] = ret;
            return ret;
    }
}

function fiboEvenSum(n) {
    // change code below this line
    return fibo(n + 1).se;
}

// For solving at freecodeCamp
Logger(1, fiboEvenSum(10));
Logger(2, fiboEvenSum(23));
Logger(3, fiboEvenSum(43));

// For solving at ProjectEuler.net :

let n = 1;
let f   = fibo(n);
while (f.n < 4000000) {
    f = fibo(++n);
}
f = fibo(--n);
// test array:
Logger(1, f);